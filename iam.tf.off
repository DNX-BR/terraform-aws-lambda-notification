# resource "random_string" "random" {
#   count  = var.account_name == "audit" ? 1 : 0
#   length  = 8
#   special = false
#   upper   = false
#   number  = false
# }

# # criando uma role para a função lambda na conta audit
# resource "aws_iam_role" "lambda_notification" {
#   count  = var.account_name == "audit" ? 1 : 0

#   name = "lambda-notification-${random_string.random.result}"

#   assume_role_policy = <<EOF
# {
# 	"Version": "2012-10-17",
# 	"Statement": [
# 		{
# 			 "Action": "sts:AssumeRole",
# 			 "Principal": {
# 			 "Service": "lambda.amazonaws.com"
# 			 },
# 			 "Effect": "Allow",
# 			 "Sid": ""
# 		}
# 	]
# }
# EOF
# }


# # adicionando uma política à role
# resource "aws_iam_role_policy" "lambda_notification" {
#   count  = var.account_name == "audit" ? 1 : 0

#   name = "lambda_notification-${random_string.random.result}" 

#   role = aws_iam_role.lambda_notification[0].name

#   policy = <<EOF
# {
#   "Version": "2012-10-17",
#   "Statement": [
# 		{
# 			"Effect": "Allow",
# 			"Action": [
# 				"logs:CreateLogGroup",
# 				"logs:CreateLogStream",
#         "logs:PutLogEvents"
# 			],
# 			"Resource": "arn:aws:logs:*:*:*"
#     }
#   ]
# }
# EOF
# }

# # politica do topico sns
# resource "aws_sns_topic_policy" "topic_notifications" {
#   count  = var.account_name == "audit" ? 1 : 0
#   arn    = aws_sns_topic.notifications[0].arn
#   policy = data.aws_iam_policy_document.topic_notifications[0].json
# }

# # documento da politica
# data "aws_iam_policy_document" "topic_notifications" {
#   count  = var.account_name == "audit" ? 1 : 0

#   statement {
#     sid = "SNSPublishingPermissions"

#     actions = [
#       "SNS:Publish",
#       "SNS:Receive"
#     ]

#     principals {
#       type        = "Service"
#       identifiers = ["budgets.amazonaws.com"]
#     }

#     resources = [
#       aws_sns_topic.notifications[0].arn,
#     ]
#   }

#   statement {
#     sid = "__default_statement_ID"

#     actions = [
#       "SNS:Subscribe",
#       "SNS:SetTopicAttributes",
#       "SNS:RemovePermission",
#       "SNS:Receive",
#       "SNS:Publish",
#       "SNS:ListSubscriptionsByTopic",
#       "SNS:GetTopicAttributes",
#       "SNS:DeleteTopic",
#       "SNS:AddPermission",
#     ]

#     condition {
#       test     = "StringEquals"
#       variable = "AWS:SourceOwner"

#       values = [
#         var.allow_from_account_ids,
#       ]
#     }

#     effect = "Allow"

#     principals {
#       type        = "AWS"
#       identifiers = ["*"]
#     }

#     resources = [
#       aws_sns_topic.notifications[0].arn,
#     ]
#   }
# }